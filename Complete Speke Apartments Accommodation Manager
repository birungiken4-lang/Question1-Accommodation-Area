import java.util.Scanner;

/**
 * Accommodation Area Management System for Speke Apartments
 * Controls Gym and Swimming areas with occupant and light management
 */
public class AccommodationManager {
    private GymArea gym;
    private SwimmingArea swimming;
    private Area activeArea;
    private Scanner scanner;
    
    // Constructor
    public AccommodationManager() {
        this.gym = new GymArea();
        this.swimming = new SwimmingArea();
        this.scanner = new Scanner(System.in);
        this.activeArea = gym; // Default active area
    }
    
    /**
     * Main menu loop for the application
     */
    public void run() {
        System.out.println("=== Speke Apartments Accommodation Manager ===");
        System.out.println("Welcome to the Area Management System!");
        
        char choice;
        do {
            displayMenu();
            System.out.print("Enter your choice: ");
            String input = scanner.nextLine().toUpperCase();
            
            if (input.isEmpty()) {
                System.out.println("Error: Please enter a valid choice.");
                continue;
            }
            
            choice = input.charAt(0);
            processChoice(choice);
            
        } while (choice != 'Q');
        
        System.out.println("Thank you for using Speke Apartments Manager. Goodbye!");
        scanner.close();
    }
    
    /**
     * Displays the main menu options
     */
    private void displayMenu() {
        System.out.println("\n--- MAIN MENU ---");
        System.out.println("S – Select active area (G = Gym, P = Swimming)");
        System.out.println("W – Add occupants to active area");
        System.out.println("X – Remove occupants from active area");
        System.out.println("Y – Switch ON a light (1-3)");
        System.out.println("Z – Switch OFF a light (1-3)");
        System.out.println("R – Report status");
        System.out.println("Q – Quit program");
        System.out.println("Active Area: " + activeArea.getAreaName());
    }
    
    /**
     * Processes the user's menu choice
     * @param choice The user's menu selection
     */
    private void processChoice(char choice) {
        switch (choice) {
            case 'S':
                selectArea();
                break;
            case 'W':
                addOccupants();
                break;
            case 'X':
                removeOccupants();
                break;
            case 'Y':
                switchLightOn();
                break;
            case 'Z':
                switchLightOff();
                break;
            case 'R':
                reportStatus();
                break;
            case 'Q':
                System.out.println("Exiting program...");
                break;
            default:
                System.out.println("Error: Invalid choice. Please select from the menu options.");
        }
    }
    
    /**
     * Allows user to select active area (Gym or Swimming)
     */
    private void selectArea() {
        System.out.print("Select area (G = Gym, P = Swimming): ");
        String input = scanner.nextLine().toUpperCase();
        
        if (input.isEmpty()) {
            System.out.println("Error: Please enter G or P.");
            return;
        }
        
        char areaChoice = input.charAt(0);
        switch (areaChoice) {
            case 'G':
                activeArea = gym;
                System.out.println("Gym area is now active.");
                break;
            case 'P':
                activeArea = swimming;
                System.out.println("Swimming area is now active.");
                break;
            default:
                System.out.println("Error: Invalid area selection. Please enter G or P.");
        }
    }
    
    /**
     * Adds occupants to the active area with validation
     */
    private void addOccupants() {
        int n = getValidInteger("Enter number of occupants to add: ");
        
        if (n > 0) {
            activeArea.addOccupants(n);
            System.out.println("Added " + n + " occupants to " + activeArea.getAreaName());
            System.out.println("Total occupants: " + activeArea.getOccupants());
        } else {
            System.out.println("Error: Number must be positive.");
        }
    }
    
    /**
     * Removes occupants from the active area with validation
     */
    private void removeOccupants() {
        int n = getValidInteger("Enter number of occupants to remove: ");
        
        if (n > 0) {
            boolean success = activeArea.removeOccupants(n);
            if (success) {
                System.out.println("Removed " + n + " occupants from " + activeArea.getAreaName());
                System.out.println("Remaining occupants: " + activeArea.getOccupants());
            } else {
                System.out.println("Error: Cannot remove more occupants than present.");
            }
        } else {
            System.out.println("Error: Number must be positive.");
        }
    }
    
    /**
     * Switches ON a specific light (1-3)
     */
    private void switchLightOn() {
        int lightNumber = getValidLightNumber();
        if (lightNumber != -1) {
            activeArea.switchLightOn(lightNumber);
            System.out.println("Light " + lightNumber + " switched ON in " + activeArea.getAreaName());
        }
    }
    
    /**
     * Switches OFF a specific light (1-3)
     */
    private void switchLightOff() {
        int lightNumber = getValidLightNumber();
        if (lightNumber != -1) {
            activeArea.switchLightOff(lightNumber);
            System.out.println("Light " + lightNumber + " switched OFF in " + activeArea.getAreaName());
        }
    }
    
    /**
     * Displays current status of the active area
     */
    private void reportStatus() {
        System.out.println("\n--- STATUS REPORT ---");
        System.out.println("Area: " + activeArea.getAreaName());
        System.out.println("Occupants: " + activeArea.getOccupants());
        System.out.println("Light States:");
        boolean[] lights = activeArea.getLightStates();
        for (int i = 0; i < lights.length; i++) {
            System.out.println("  Light " + (i + 1) + ": " + (lights[i] ? "ON" : "OFF"));
        }
        System.out.println("--------------------");
    }
    
    /**
     * Gets a valid integer input from user with error handling
     * @param prompt The message to display to user
     * @return Valid integer input
     */
    private int getValidInteger(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine();
            
            try {
                return Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("Error: Please enter a valid integer number.");
            }
        }
    }
    
    /**
     * Gets a valid light number (1, 2, or 3) from user
     * @return Valid light number or -1 if invalid
     */
    private int getValidLightNumber() {
        int lightNumber = getValidInteger("Enter light number (1-3): ");
        
        if (lightNumber >= 1 && lightNumber <= 3) {
            return lightNumber;
        } else {
            System.out.println("Error: Light number must be 1, 2, or 3.");
            return -1;
        }
    }
    
    /**
     * Main method to start the application
     */
    public static void main(String[] args) {
        AccommodationManager manager = new AccommodationManager();
        manager.run();
    }
}

/**
 * Abstract class representing a general accommodation area
 */
abstract class Area {
    protected int occupants;
    protected boolean[] lights;
    protected String areaName;
    
    public Area(String name) {
        this.areaName = name;
        this.occupants = 0;
        this.lights = new boolean[3]; // 3 lights, all initially off
    }
    
    // Getters
    public String getAreaName() { return areaName; }
    public int getOccupants() { return occupants; }
    public boolean[] getLightStates() { return lights.clone(); }
    
    /**
     * Adds occupants to the area
     * @param n Number of occupants to add
     */
    public void addOccupants(int n) {
        occupants += n;
    }
    
    /**
     * Removes occupants from the area
     * @param n Number of occupants to remove
     * @return true if successful, false if would go below zero
     */
    public boolean removeOccupants(int n) {
        if (occupants - n >= 0) {
            occupants -= n;
            return true;
        }
        return false;
    }
    
    /**
     * Switches ON a specific light
     * @param lightNumber Light number (1-3)
     */
    public void switchLightOn(int lightNumber) {
        if (lightNumber >= 1 && lightNumber <= 3) {
            lights[lightNumber - 1] = true;
        }
    }
    
    /**
     * Switches OFF a specific light
     * @param lightNumber Light number (1-3)
     */
    public void switchLightOff(int lightNumber) {
        if (lightNumber >= 1 && lightNumber <= 3) {
            lights[lightNumber - 1] = false;
        }
    }
}

/**
 * Gym Area class
 */
class GymArea extends Area {
    public GymArea() {
        super("Gym Area");
    }
}

/**
 * Swimming Area class
 */
class SwimmingArea extends Area {
    public SwimmingArea() {
        super("Swimming Area");
    }
}
